Module M_orderpack__refsor
use,intrinsic :: iso_fortran_env, only : int8, int16, int32, int64, real32, real64, real128
implicit none
Private
integer,parameter :: f_char=selected_char_kind("DEFAULT")
public :: refsor
private :: real64_inssor, real32_inssor, int32_inssor, f_char_inssor
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$BLOCK COMMENT --file sort.3m_orderpack.man
NAME
   sort(3f) - [M_orderpack:SORT] Sorts array into ascending order
                (Quick-sort)

SYNOPSIS
    Subroutine Sort (INOUTVALS)

      ${TYPE} (kind=${KIND}), Intent (InOut) :: INOUTVALS(:)

   Where ${TYPE}(kind=${KIND}) may be

      o Real(kind=real32)
      o Real(kind=real64)
      o Integer(kind=int32)
      o Character(kind=selected_char_kind("DEFAULT"),len=*)

DESCRIPTION
   Sorts INOUTVALS into ascending order (Quick-sort)

   This version is not optimized for performance, and is thus not as
   difficult to read as some other ones.

   Internally, This subroutine uses Quick-sort in a recursive
   implementation, and insertion sort for the last steps with small
   subsets. It does not use any work array.

   The Quick-sort
   chooses a "pivot" in the set, and explores the array from
   both ends, looking for a value > pivot with the increasing index,
   for a value <= pivot with the decreasing index, and swapping them
   when it has found one of each. The array is then subdivided in
   two subsets:

       { values <= pivot} {pivot} {values > pivot}

   It then recursively calls the procedure to sort each subset. When
   the size of the subarray is small enough, it switches to an insertion
   sort that is faster for very small sets.

OPTIONS
    INOUTVALS      array to sort

EXAMPLES
  Sample program:

   program demo_sort
   ! sort array in ascending order
   use,intrinsic :: iso_fortran_env, only : int32, real32, real64
   use M_orderpack, only : sort
   implicit none
   ! an insertion sort is very efficient for very small arrays
   ! but generally slower than methods like quick-sort and merge-sort.
   real(kind=real64) :: valsd(2000)
   integer           :: i
      call random_seed()
      call random_number(valsd)
      valsd=valsd*1000000.0-500000.0
      call sort(valsd)
      do i=1,size(valsd)-1
         if (valsd(i+1).lt.valsd(i))then
            write(*,*)'not sorted'
            stop 3
         endif
      enddo
      write(*,*)'random arrays are now sorted'
   end program demo_sort

  Results:

    random arrays are now sorted

AUTHOR
   Michel Olagnon - Apr. 2000
MAINTAINER
   John Urban, 2022.04.16
LICENSE
   CC0-1.0
$ENDBLOCK
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
interface refsor
  module procedure real64_refsor, real32_refsor, int32_refsor, f_char_refsor
end interface refsor
contains
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$PARCEL REFSOR
Subroutine ${KIND}_refsor (INOUTVALS)
! __________________________________________________________
$IFDEF CHARACTER
      ${TYPE} (kind=${KIND},len=*), Dimension (:), Intent (InOut) :: INOUTVALS
$ELSE
      ${TYPE} (kind=${KIND}), Dimension (:), Intent (InOut) :: INOUTVALS
$ENDIF
! __________________________________________________________
      Call ${KIND}_subsor (INOUTVALS, 1, Size (INOUTVALS))
      Call ${KIND}_inssor (INOUTVALS)
End Subroutine ${KIND}_refsor

Recursive Subroutine ${KIND}_subsor (INOUTVALS, IDEB1, IFIN1)
!  Sorts INOUTVALS from IDEB1 to IFIN1
! __________________________________________________________
$IFDEF CHARACTER
      ${TYPE}(kind=${KIND},len=*), dimension (:), Intent (InOut) :: INOUTVALS
$ELSE
      ${TYPE}(kind=${KIND}), dimension (:), Intent (InOut) :: INOUTVALS
$ENDIF
      Integer, Intent (In) :: IDEB1, IFIN1
! __________________________________________________________
$IFDEF CHARACTER
      ${TYPE}(kind=${KIND},len=len(INOUTVALS)) :: XPIV, XWRK
$ELSE
      ${TYPE}(kind=${KIND}) :: XPIV, XWRK
$ENDIF
      Integer, Parameter :: NINS = 16 ! Max for insertion sort
      Integer :: ICRS, IDEB, IDCR, IFIN, IMIL
!
      IDEB = IDEB1
      IFIN = IFIN1
!
!  If we don't have enough values to make it worth while, we leave
!  them unsorted, and the final insertion sort will take care of them
!
      If ((IFIN - IDEB) > NINS) Then
         IMIL = (IDEB+IFIN) / 2
!
!  One chooses a pivot, median of 1st, last, and middle values
!
         If (INOUTVALS(IMIL) < INOUTVALS(IDEB)) Then
            XWRK = INOUTVALS (IDEB)
            INOUTVALS (IDEB) = INOUTVALS (IMIL)
            INOUTVALS (IMIL) = XWRK
         End If
         If (INOUTVALS(IMIL) > INOUTVALS(IFIN)) Then
            XWRK = INOUTVALS (IFIN)
            INOUTVALS (IFIN) = INOUTVALS (IMIL)
            INOUTVALS (IMIL) = XWRK
            If (INOUTVALS(IMIL) < INOUTVALS(IDEB)) Then
               XWRK = INOUTVALS (IDEB)
               INOUTVALS (IDEB) = INOUTVALS (IMIL)
               INOUTVALS (IMIL) = XWRK
            End If
         End If
         XPIV = INOUTVALS (IMIL)
!
!  One exchanges values to put those > pivot in the end and
!  those <= pivot at the beginning
!
         ICRS = IDEB
         IDCR = IFIN
         ECH2: Do
            Do
               ICRS = ICRS + 1
               If (ICRS >= IDCR) Then
!
!  the first  >  pivot is IDCR
!  the last   <= pivot is ICRS-1
!  Note: If one arrives here on the first iteration, then
!        the pivot is the maximum of the set, the last value is equal
!        to it, and one can reduce by one the size of the set to process,
!        as if INOUTVALS (IFIN) > XPIV
!
                  Exit ECH2
!
               End If
               If (INOUTVALS(ICRS) > XPIV) Exit
            End Do
            Do
               If (INOUTVALS(IDCR) <= XPIV) Exit
               IDCR = IDCR - 1
               If (ICRS >= IDCR) Then
!
!  The last value < pivot is always ICRS-1
!
                  Exit ECH2
               End If
            End Do
!
            XWRK = INOUTVALS (IDCR)
            INOUTVALS (IDCR) = INOUTVALS (ICRS)
            INOUTVALS (ICRS) = XWRK
         End Do ECH2
!
!  One now sorts each of the two sub-intervals
!
         Call ${KIND}_subsor (INOUTVALS, IDEB1, ICRS-1)
         Call ${KIND}_subsor (INOUTVALS, IDCR, IFIN1)
      End If

   End Subroutine ${KIND}_subsor

   Subroutine ${KIND}_inssor (INOUTVALS)
!  Sorts INOUTVALS into increasing order (Insertion sort)
! __________________________________________________________
$IFDEF CHARACTER
      ${TYPE}(kind=${KIND},len=*), dimension (:), Intent (InOut) :: INOUTVALS
$ELSE
      ${TYPE}(kind=${KIND}), dimension (:), Intent (InOut) :: INOUTVALS
$ENDIF
! __________________________________________________________
      Integer :: ICRS, IDCR
$IFDEF CHARACTER
      ${TYPE}(kind=${KIND},len=len(INOUTVALS)) :: XWRK
$ELSE
      ${TYPE}(kind=${KIND}) :: XWRK
$ENDIF
!
      Do ICRS = 2, Size (INOUTVALS)
         XWRK = INOUTVALS (ICRS)
         If (XWRK >= INOUTVALS(ICRS-1)) Cycle
         INOUTVALS (ICRS) = INOUTVALS (ICRS-1)
         Do IDCR = ICRS - 2, 1, - 1
            If (XWRK >= INOUTVALS(IDCR)) Exit
            INOUTVALS (IDCR+1) = INOUTVALS (IDCR)
         End Do
         INOUTVALS (IDCR+1) = XWRK
      End Do
!
End Subroutine ${KIND}_inssor
$ENDPARCEL
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$UNDEFINE CHARACTER INTEGER
$SET KIND real64
$SET TYPE Real
$POST refsor
$
$SET KIND real32
$SET TYPE Real
$POST refsor
$
$SET KIND int32
$SET TYPE Integer
$POST refsor
$
$DEFINE CHARACTER
$SET KIND f_char
$SET TYPE character
$POST refsor
$UNDEFINE CHARACTER
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
end module M_orderpack__refsor

#@(#) Makefile started by makeout(1) 2022-04-15 09:02:48
# generated by:   ...
# ########################################################################################
NULL=
PROGFILES = $(wildcard ../app/*.f90) $(wildcard ../example/*.f90) $(wildcard ../example/*/*.f90)
PROG = ${PROGFILES:.f90=}
SRCS = $(wildcard ./*.f90) $(wildcard ./*.c ) $(wildcard ./*.h )
LIBS := -Llib -lorderpack

CPROGFILES = 

CPROG = ${CPROGFILES:.c=}
# create a list of corresponding object files
COBJS_FILES = $(wildcard ./*.c )
FOBJS_FILES = $(wildcard ./*.f90 )
OBJS = $(patsubst %.c,%.o,$(COBJS_FILES)) $(patsubst %.f90,%.o,$(FOBJS_FILES))
LIBOBJS = $(patsubst %.f90,$(LIBRARY)(%.o),$(SRCS)) $(patsubst %.c,$(LIBRARY)(%.o),$(SRCS))

INSTALL=./lib
# ########################################################################################

TESTFILES = $(wildcard ../test/*.f90) $(wildcard ../test/*.F90) $(wildcard ../test/*/*.f) $(wildcard ../test/*/*.F)
TESTFILES =

TPROG = ${TESTFILES:.f90=}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# platform-specific values you will probably change
# 
LIBS := 
CC := cc
CFLAGS := -O
FC := gfortran
FFLAGS := -O -J $(INSTALL)
F90 := gfortran
F90FLAGS := -O
LDFLAGS := -I $(INSTALL)
AR=ar
ARFLAGS=rU
RANLIB=ranlib

gfortran: FC=gfortran
gfortran: FFLAGS := -g -O -Wall -std=f2018 -Wextra -Wno-maybe-uninitialized -Wno-uninitialized
gfortran: all
	@echo built with $(FC)

nvfortran: FC=nvfortran
nvfortran: FFLAGS := -Minform=inform -Mbackslash -traceback
nvfortran: all
	@echo built with $(FC)

ifort: FC=ifort
ifort: FFLAGS := -warn all -traceback
ifort: all
	@echo built with $(FC)

nagfor: FC=nagfor
nagfor: FFLAGS := -C all
nagfor: all
	@echo built with $(FC)

# name of library to build of the form lib$NAME.a
LIBNAME=orderpack
# directory to place output files in
LIBRARY=$(INSTALL)/lib$(LIBNAME).a
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# set the '.RECIPEPREFIX' variable to an alternate character
#.RECIPEPREFIX = >
#-------------------------------------------------------------------------------
# list what to run and then do any teardown. Do not leave this empty
all: directorysetup $(OBJS) $(LIBRARY) $(CPROG) $(PROG) $(TPROG)
	#@test -f test_suite_log.txt || $(MAKE) test
	@echo "That's all Folks!"
#-------------------------------------------------------------------------------
# what to do before you start compiling
directorysetup:
	@ echo "MAKING LIBRARY:   $(LIBRARY)" 
	@ [ -d "$(INSTALL)" ] || \
	(echo "making directory $(INSTALL)"; \
	mkdir -p $(INSTALL))
#-------------------------------------------------------------------------------
$(PROG): $(OBJS) $(LIBRARY)
	@echo "PROG"
	-$(F90) $(LDFLAGS) $@.f90 -o $@ $(OBJS) $(LIBS)||echo "ouch: $@.f90 "
#-------------------------------------------------------------------------------
# what to do after you have built the library
$(LIBRARY): $(LIBOBJS)
	@echo "LIBRARY"
	@ $(RANLIB) $(LIBRARY)
	@ echo "TARGETS FOR $(LIBRARY) UP TO DATE"
	-$(FC) $(FFLAGS) $(LDFLAGS) $@.f90 -o $@ $(LIBS)
#-------------------------------------------------------------------------------
#$(OBJS): draw.h
#-------------------------------------------------------------------------------
$(TPROG): $(LIBRARIES)
	@echo "TPROG"
	-$(F90) $(LDFLAGS) $@.f90 -o $@ $(OBJS) $(LIBS)||echo "ouch: $@.f90 "
#-------------------------------------------------------------------------------
.phony: clean
clean:
	-rm -f $(PROG) $(CPROG) $(TPROG) $(OBJS) *.mod *.o
	-rm -f $(LIBRARY) $(INSTALL)/*.mod
#-------------------------------------------------------------------------------
.SUFFIXES: $(SUFFIXES) .f90 .F90 .ff .FF .shf
	# .shf -- assumed to write Fortran code to stdout when executed
	# .FF -- run thru prep(1) with    $system directives allowed
	# .ff -- run thru prep(1) without $system directives allowed
#-------------------------------------------------------------------------------
# override built-in implicit make rule that tells make it can make object files
# from modula-2 .mod files by running m2c
%.o: %.mod
#
#-------------------------------------------------------------------------------
.f90.o:
	@echo "f90"
	$(F90) $(F90FLAGS) -c $<
#-------------------------------------------------------------------------------
.F90.o:
	@echo "F90"
	$(F90) $(F90FLAGS) -c $<
#-------------------------------------------------------------------------------
# Fortran free format file known to have prep(1) preprocessor directives
# run thru prep(1) preprocessor with system commands allowed, variable F90 defined
# Assumes .F90 file does not exist previously, as it will overwrite it.
.FF.F90:
	@# run thru prep(1) preprocessor with system commands allowed
	prep -D F90 `uname -o` -verbose -system .true. -i $(<) -o $(*F).F90
	@[ -s $(*F).F90 ] || echo "error: $(*F).F90 is empty"
	#-------------------------------------------------------------------------------
	# Fortran free format file known to have prep(1) preprocessor directives
	# run thru prep(1) preprocessor with no system commands allowed, variable F90
	# defined. Assumes .F90 file does not exist previously, as it will overwrite it.
#-------------------------------------------------------------------------------
.ff.f90:
	@# run thru prep(1) preprocessor with system commands allowed
	prep -D F90 `uname -o` -verbose -i $(<) -o $(*F).F90
	@[ -s $(*F).F90 ] || echo "error: $(*F).F90 is empty"
.f90.a: $(OBJS) $(LIBRARY)
	@echo "f90.a"
	echo "LIBRARY is $(LIBRARY)"
	$(F90) -c $(F90FLAGS) $< -o $%
	@ $(AR) $(ARFLAGS) $(LIBRARY) $% 
	@ $(AR) $(ARFLAGS) $(LIBRARY) $<  # optionally store the source code too
	#@ /bin/rm -f ${?F:.f90=.o} $%
.c.a:
	$(CC) -c $(CFLAGS) $< -o $%
	@ $(AR) $(ARFLAGS) $(LIBRARY) $% 
	@ $(AR) $(ARFLAGS) $(LIBRARY) $<  # optionally store the source code too
	#@ /bin/rm -f ${?F:.c=.o} $%
#-------------------------------------------------------------------------------
.PHONY: help
help:
	: all     '-- build ORDERPACK module'
	: run     '-- run manpage demo programs'
	: man     '-- show all manpages as text'
	: clean   '-- clean directory of object files and executables'
	: doxygen '-- run doxygen(1) if you have it'
	: ford    '-- run ford(1) if you have it'
	: help    '-- display this text'
#-------------------------------------------------------------------------------
.PHONY: run
run: $(PROG)
	# run everything
	echo $? |xargs -n 1|xargs -iXX time XX
#-------------------------------------------------------------------------------
.PHONY: doxygen
doxygen: 
	doxygen dox.in
#-------------------------------------------------------------------------------
.PHONY: ford
ford: 
	cd ..;ford ford.md
#-------------------------------------------------------------------------------
.PHONY: man
man:
	@mandb ../man 1>&2
	: INDEX OF MANPAGES TOPICS
	@env MANPATH=../man MANWIDTH=256 man -k .|col -b
	: MANPAGES
	@env MANPATH=../man MANWIDTH=80  man --regex '.*'|col -b
	: SPELLING
	@env MANPATH=../man MANWIDTH=80  man --regex '.*'|col -b|spell|xargs -n 5|column -t
#-------------------------------------------------------------------------------
m_ctrper.o: m_mrgrnk.o 
m_mulcnt.o: m_uniinv.o 
m_unista.o: m_uniinv.o 
#-------------------------------------------------------------------------------
